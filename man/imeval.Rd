% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R, R/imeval.R
\name{imeval}
\alias{imeval}
\alias{imeval}
\title{Pixel-wise evaluation of a CImg expression}
\usage{
imeval(obj, ..., env = parent.frame())

imeval(obj, ..., env = parent.frame())
}
\arguments{
\item{obj}{an image, pixset or imlist}

\item{...}{one or more formula objects, defining anonymous functions that will be evaluated with the image as first argument (with extra contextual variables added to the evaluation context)}

\item{env}{additional variables (defaults to the calling environment)}

\item{im}{an image}

\item{expr}{an expression (as string)}
}
\description{
This function provides experimental support for CImg's "math expression parser", a byte-compiled mini-language.

imeval does for images what "with" does for data.frames, namely contextual evaluation. It provides shortcuts for pixel-wise operations.
It takes inspiration from purrr::map in using formulas for defining anonymous functions using the "." argument.
Usage is made clear (hopefully) in the examples.
The old version of imeval used CImg's internal math parser, but has been retired.
}
\examples{
imfill(10,10) \%>\% imeval('x+y') \%>\% plot
# Box filter
boxf = "v=0;for(iy=y-3,iy<y+3,iy++,for(ix=x-3,ix< x+3,ix++,v+=i(ix,iy)));v"
imeval(boats,boxf) \%>\% plot
# Example by D. Tschumperle: Julia set
julia <-  "
   zr = -1.2 + 2.4*x/w;
   zi = -1.2 + 2.4*y/h;
   for (iter = 0, zr^2+zi^2<=4 && iter<256, iter++,
     t = zr^2 - zi^2 + 0.5;
     (zi *= 2*zr) += 0.2;
     zr = t
   );
   iter"
imfill(500,500) \%>\% imeval(julia) \%>\% plot
## Computing mean absolute deviation
imeval(boats, ~ mean(abs(.-median(.))))
##Equivalent to:
mean(abs(boats-median(boats)))
##Two statistics
imeval(boats,mad=  ~ mean(abs(.-median(.))),sd=  ~ sd(.))
##imeval can precompute certain quantities, like the x or y coord. of each pixel
imeval(boats,~ x) \%>\% plot
##same as Xc(boats) \%>\% plot
## Other predefined quantities:
##w is width, h is height
imeval(boats,~ x/w) \%>\% range
##It defines certain transformed coordinate systems:
##Scaled x,y,z
## xs=x/w
## ys=y/h
##Select upper-left quadrant (returns a pixset)
imeval(boats,~ xs<.5 & ys < .5) \%>\% plot
##Fade effect
imeval(boats,~ xs*.) \%>\% plot
## xc and yc are another set of transformed coordinates
## where xc=0,yc=0 is the image center
imeval(boats,~ (abs(xc)/w)*.) \%>\% plot

##rho, theta: circular coordinates. rho is distance to center (in pix.), theta angle
##Gaussian mask with sd 10 pix.
blank <- imfill(30,30)
imeval(blank,~ dnorm(rho,sd=w/3)) \%>\% plot(int=FALSE)
imeval(blank,~ theta) \%>\% plot
##imeval is made for interactive use, meaning it accesses the environment it got called from, e.g. this works: 
f <- function()
{
  a <- imfill(3,3,val=1)
   b <- imfill(3,3,val=3)

  imeval(a,~ .+b)
}
f()
##imeval accepts lists as well 
map_il(1:3, ~ isoblur(boats,.)) \%>\%
   imeval(~ xs*.) \%>\%
   plot

##imeval is useful for defining pixsets:
##here, all central pixels that have value under the median
grayscale(boats) \%>\%
    imeval(~ (. > median(.)) & rho < 150) \%>\%
    plot
}
\seealso{
imchange, which modifies specific parts of an image
}
\author{
Simon Barthelme
}
