% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{mutate_plyr}
\alias{mutate_plyr}
\title{Mutate a data frame by adding new or replacing existing columns.}
\usage{
mutate_plyr(.data, ...)
}
\arguments{
\item{.data}{the data frame to transform}

\item{...}{named parameters giving definitions of new columns.}
}
\description{
This function copied directly from plyr, and modified to use a different
name to avoid namespace collisions with dplyr/tidyverse functions.
}
\details{
This function is very similar to \code{\link{transform}} but it executes
the transformations iteratively so that later transformations can use the
columns created by earlier transformations.  Like transform, unnamed
components are silently dropped.

Mutate seems to be considerably faster than transform for large data
frames.
}
\examples{
# Examples from transform
data(airquality)
mutate_plyr(airquality, Ozone = -Ozone)
mutate_plyr(airquality, new = -Ozone, Temp = (Temp - 32) / 1.8)

# Things transform can't do
mutate_plyr(airquality, Temp = (Temp - 32) / 1.8, OzT = Ozone / Temp)

# mutate is rather faster than transform
data(baseball)
system.time(transform(baseball, avg_ab = ab / g))
system.time(mutate_plyr(baseball, avg_ab = ab / g))
}
\seealso{
\code{\link{subset}}, \code{\link{summarise}},
  \code{\link{arrange}}.  For another somewhat different approach to
  solving the same problem, see \code{\link{within}}.
}
